generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Policy {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(128)
  createdAt   DateTime? @default(now()) @db.Timestamptz()
  updatedAt   DateTime? @updatedAt @db.Timestamptz()
  isActive    Boolean   @default(true)
  permissions Json?
  users       User[]

  @@map("policies")
}

model User {
  id                String         @id @default(uuid()) @db.Uuid
  email             String?        @unique(map: "user_email_key") @db.VarChar(128)
  username          String         @unique(map: "user_username_key") @db.VarChar(128)
  password          String         @db.VarChar(255)
  displayName       String?        @db.VarChar(128)
  phone             String?        @unique @db.VarChar(24)
  isActive          Boolean        @default(true)
  role              String         @default("user") @db.VarChar(24)
  thumbnail         String?        @db.VarChar(400)
  policyId          Int?
  lastSeen          DateTime?      @default(now()) @db.Timestamptz()
  updatedAt         DateTime?      @default(now()) @db.Timestamptz()
  createdAt         DateTime?      @updatedAt @db.Timestamptz()
  files             File[]         @relation("filesToUser")
  loginHistory      LoginHistory[] @relation("loginHistoryToUser")
  marketing         Business[]     @relation("userMarketing")
  updatedByBusiness Business[]     @relation("updatedByBusiness")
  creatorBusiness   Business[]     @relation("creatorBusiness")
  creatorScratch    Job[]          @relation("creatorJob")
  updatedByScratch  Job[]          @relation("updatedByJob")
  creatorCategory   Category[]     @relation("creatorCategory")
  updateByCategory  Category[]     @relation("updatedByCategory")
  policy            Policy?        @relation(fields: [policyId], references: [id])

  @@map("users")
}

model LoginHistory {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  ipAddress String   @db.VarChar(64)
  createAt  DateTime @default(now()) @db.Timestamptz()
  user      User     @relation("loginHistoryToUser", fields: [userId], references: [id])

  @@map("login_history")
}

model Category {
  id          String     @id @default(uuid()) @db.Uuid
  name        String     @unique(map: "category_name_key") @db.VarChar(128)
  slug        String     @unique(map: "category_slug_key") @db.VarChar(128)
  properties  String[]   @db.VarChar(128)
  creatorId   String?    @db.Uuid
  updatedById String?    @db.Uuid
  createdAt   DateTime?  @default(now()) @db.Timestamptz()
  updatedAt   DateTime?  @updatedAt @db.Timestamptz()
  creator     User?      @relation("creatorCategory", fields: [creatorId], references: [id])
  updatedBy   User?      @relation("updatedByCategory", fields: [updatedById], references: [id])
  business    Business[] @relation("businesseToCategory")

  @@map("categories")
}

model Business {
  id              String     @id @default(uuid()) @db.Uuid
  isActive        Boolean    @default(true)
  name            String     @db.VarChar(400)
  phone           String?    @db.VarChar(24)
  email           String?    @db.VarChar(64)
  website         String?    @db.VarChar(800)
  scratchLink     String?    @db.VarChar(400)
  source          String?    @db.VarChar(128)
  state           String?    @db.VarChar(8)
  zipCode         String?    @db.VarChar(16)
  city            String?    @db.VarChar(128)
  address         String     @db.VarChar(128)
  status          String[]   @db.VarChar(24)
  categories      String[]   @db.VarChar(128)
  thumbnailUrl    String?    @db.VarChar(400)
  statusWebsite   Int?       @default(1)
  keyword         String?    @db.VarChar(128)
  googleVerify    Boolean?   @default(false)
  statusMarketing String?    @default("NOT_ACCEPT") @db.VarChar(24)
  userMarketingId String?    @db.Uuid
  cityId          String?    @db.Uuid
  creatorId       String?    @db.Uuid
  updatedById     String?    @db.Uuid
  createdAt       DateTime?  @default(now()) @db.Timestamptz()
  updatedAt       DateTime?  @updatedAt @db.Timestamptz()
  category        Category[] @relation("businesseToCategory")
  cityName        City?      @relation("cityToBusiness", fields: [cityId], references: [id])
  userMarketing   User?      @relation("userMarketing", fields: [userMarketingId], references: [id])
  creator         User?      @relation("creatorBusiness", fields: [creatorId], references: [id])
  updatedBy       User?      @relation("updatedByBusiness", fields: [updatedById], references: [id])

  @@unique([scratchLink])
  @@index([name])
  @@index([phone])
  @@index([categories])
  @@index([website])
  @@index([source])
  @@index([state])
  @@index([zipCode])
  @@index([city])
  @@index([address])
  @@map("business")
}

model Job {
  id          String    @id @default(uuid()) @db.Uuid
  status      Int       @default(1)
  keyword     String?   @db.VarChar(128)
  state       String?   @db.VarChar(8)
  county      String[]  @db.VarChar(128)
  zipCode     String[]  @db.VarChar(16)
  statusData  Json?
  creatorId   String?   @db.Uuid
  updatedById String?   @db.Uuid
  type        String?   @default("NORMAL") @db.VarChar(24)
  duration    Int?
  createdAt   DateTime? @default(now()) @db.Timestamptz()
  updatedAt   DateTime? @updatedAt @db.Timestamptz()
  creator     User?     @relation("creatorJob", fields: [creatorId], references: [id])
  updatedBy   User?     @relation("updatedByJob", fields: [updatedById], references: [id])

  @@map("jobs")
}

model City {
  id         String     @id @default(uuid()) @db.Uuid
  cityName   String     @db.VarChar(128)
  stateCode  String     @db.VarChar(8)
  stateName  String     @db.VarChar(128)
  countyName String     @db.VarChar(128)
  zipCode    String     @db.VarChar(16)
  Business   Business[] @relation("cityToBusiness")

  @@unique([cityName, stateCode, zipCode])
  @@map("cities")
}

model File {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(128)
  type      String   @db.VarChar(20)
  url       String   @db.VarChar(800)
  dirFile   String?  @db.VarChar(128)
  creatorId String?  @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  creator   User?    @relation("filesToUser", fields: [creatorId], references: [id])

  @@map("files")
}
